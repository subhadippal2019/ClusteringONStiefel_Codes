### j cluster index
### i data index
### y - 1xn vector, n is the number of data points
### n total number of data
### inc - the initial number of classes
### s - scaler for estimating mu, mu's prior is N(0,1/s)
### M - scaler hyperparameter for DP
## Initialization
n = length(y)
# number of classes
# sample z from beta(1,M)
z = rbeta(nc,alpha,beta)
w = compute_w_from_z(z)
# random initialize d_i
d = ceiling(nc*runif(n))
# initial mu
mu = rnorm(nc,0,1/s)  ### this is phi
## Main loop
for (iter in 1:maxiter) {
### sample phi
mu = update_phi(y,d,mu)
### sample z
z = update_z(d,alpha,beta,z) ### see Muller et al book
w = compute_w_from_z(z)
## sample u
u = runif(n)
for (i in 1:n){
u[i] = u[i]*w[d[i]]
}
## N = n
ustar = min(u)
while (sum(w[1:nc]) <= (1-ustar)){
nc = nc+1
#alpha = 0.1 to make the new cluster proportion small
res = add_new_cluster(nc,alpha,beta,s,z,mu)
cat("called adding new cluster \n")
z = res$z
w = res$w
mu = res$mu
}
#cat(length(w),"\t",length(mu),"\n")
## sample d
#browser()
for (i in 1:n){
w_greater_u_i = which(w > u[i])
L = length(w_greater_u_i)
pr_vec = rep(0,L)
for(l in 1:L){
k = w_greater_u_i[l]
pr_vec[l] = w[k]*dnorm(y[i],mu[k],1) ### variance is currently 1 + Normality assumption
}
#cat(pr_vec,"\n")
if(length(pr_vec) == 0){
cat("Error!!!!\n")
}
if(length(pr_vec) > 1){
d[i] = sample(w_greater_u_i,1,pr_vec,replace=FALSE)
}else{
d[i] = w_greater_u_i[1]
}
}
}
res$mu = mu
res$w = w
res$d = d
return(res)
}
maxiter = 500
inc = length(unique(MC$classification))
s = 0.03
alpha = 0.5
M = 1
beta = M
res = slice_DPM_Normal(y, maxiter, inc, s, alpha,beta)
id = as.integer(names(table(res$d)))
cat(res$mu[id],"\n")
cat(res$w[id],"\n")
print(table(res$d))
######################
res$w
res$mu
y[id_4]
mean(y[id_4])
mean(y[id_3])
res$w
round(res$w,2)
res$mu
table(w)
table(res$w)
table(res$d)
res$w
res$mu[res$w > 0.0001]
res$mu[res$w > 0.01]
round(res$w,2)
table(res$d)
res$mu[round(res$w,2) > 0.01]
56.1111-4.92*(34/3)
56.1111-4.92*(11/3)
56.1111-(4.92*(34/3))
56.1111+(4.92*(34/3))
rgamma
C_rgamma
rnorm
tgamma
t=1.45
A=matrix(c(cos(t),sin(t),-sin(t),cos(t)),nrows=2)
A=matrix(c(cos(t),sin(t),-sin(t),cos(t)),nrow=2)
A
det(A)
eigen(A)
load("~/Dropbox/ClusteringDTIonstiefel/RealData/NEO/neo_192_data.RData")
neo_192
neo_192[,,1]
getwd("~/Dropbox/ClusteringDTIonstiefel/DensitySVD_sep1_16/")
.libPaths()
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
X = seq(0.1,3,by=0.001)
a=0.5
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,3),ylim=c(0,3))
abline(0,1)
setwd("~/Dropbox/ClusteringDTIonstiefel/DensitySVD_sep1_16/C_code/")
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
X = seq(0.1,3,by=0.001)
a=0.5
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,3),ylim=c(0,3))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
X = seq(0.1,3,by=0.001)
a=1.5
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,3),ylim=c(0,3))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
X = seq(0.1,3,by=0.001)
a=1.0
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,3),ylim=c(0,3))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
X = seq(0.1,3,by=0.001)
a=0.8
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,3),ylim=c(0,3))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
X = seq(0.1,10,by=0.001)
a=0.8
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,3),ylim=c(0,3))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=10
X = seq(0.1,K,by=0.001)
a=0.3
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=10
X = seq(0.1,K,by=0.001)
a=1.5
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=10
X = seq(0.1,K,by=0.001)
a=1.0
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=10
X = seq(0.1,K,by=0.001)
a=0.9
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=10
X = seq(0.1,K,by=0.001)
a=0.75
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=10
X = seq(0.1,K,by=0.001)
a=0.7
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=10
X = seq(0.1,K,by=0.001)
a=0.55
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=10
X = seq(0.1,K,by=0.001)
a=0.5
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=10
X = seq(0.1,K,by=0.001)
a=0.55
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=30
X = seq(1,K,by=0.1)
a=0.75
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=30
X = seq(1,K,by=0.1)
a=0.65
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=30
X = seq(1,K,by=0.1)
a=0.6
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=30
X = seq(1,K,by=0.1)
a=1.2
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=30
X = seq(1,K,by=0.1)
a=0.65
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
V1 = NULL
V2 = NULL
D = NULL
K=30
X = seq(1,K,by=0.1)
a=0.6
for (i in 1:length(X)){
dRet = 0.0
D[2] = 1.0
D[1] = X[i]
eigenValues=D^2/4
h = .C("hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
h1 = .C("partial_d1_hyper_2by2_R",cc=a,eigenValues,dRet)[[3]]
V1[i] = h
V2[i] = h1
}
plot(V1,V2,type='l',col='red',xlim=c(0,K),ylim=c(0,K))
abline(0,1)
dyn.load("functions_hyper_2by2_R.so")
